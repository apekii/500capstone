var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"flightController","ref":true,"files":[{"name":"flightController.c","type":"source","group":"model","path":"C:\\Users\\navin\\MATLAB\\Projects\\examples\\asbQuadcopter\\work\\slprj\\ert\\flightController","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: flightController.c\r\n *\r\n * Code generated for Simulink model 'flightController'.\r\n *\r\n * Model version                  : 5.1\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue Nov 30 09:36:10 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM 9\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"flightController.h\"\r\n#include \"flightController_private.h\"\r\n\r\nP_flightController_T flightController_P_g = {\r\n  /* Computed Parameter: D_xy_Gain\r\n   * Referenced by: '<S4>/D_xy'\r\n   */\r\n  { 0.1F, -0.1F },\r\n\r\n  /* Computed Parameter: Gain_Gain\r\n   * Referenced by: '<S4>/Gain'\r\n   */\r\n  -1.0F,\r\n\r\n  /* Computed Parameter: Saturation_UpperSat\r\n   * Referenced by: '<S4>/Saturation'\r\n   */\r\n  3.0F,\r\n\r\n  /* Computed Parameter: Saturation_LowerSat\r\n   * Referenced by: '<S4>/Saturation'\r\n   */\r\n  -3.0F,\r\n\r\n  /* Computed Parameter: P_xy_Gain\r\n   * Referenced by: '<S4>/P_xy'\r\n   */\r\n  { -0.24F, 0.24F },\r\n\r\n  /* Expression: Controller.takeoffGain\r\n   * Referenced by: '<S6>/takeoff_gain'\r\n   */\r\n  0.45F,\r\n\r\n  /* Computed Parameter: D_z_Gain\r\n   * Referenced by: '<S6>/D_z'\r\n   */\r\n  0.3F,\r\n\r\n  /* Computed Parameter: P_z_Gain\r\n   * Referenced by: '<S6>/P_z'\r\n   */\r\n  0.8F,\r\n\r\n  /* Expression: Controller.Q2Ts\r\n   * Referenced by: '<S3>/TorqueTotalThrustToThrustPerMotor'\r\n   */\r\n  { 0.25F, 0.25F, 0.25F, 0.25F, 103.573624F, -103.573624F, 103.573624F,\r\n    -103.573624F, -5.66592F, -5.66592F, 5.66592F, 5.66592F, -5.66592F, 5.66592F,\r\n    5.66592F, -5.66592F },\r\n\r\n  /* Computed Parameter: D_pr_Gain\r\n   * Referenced by: '<S2>/D_pr'\r\n   */\r\n  { 0.002F, 0.0028F },\r\n\r\n  /* Computed Parameter: DiscreteTimeIntegrator_gainval\r\n   * Referenced by: '<S2>/Discrete-Time Integrator'\r\n   */\r\n  0.005F,\r\n\r\n  /* Computed Parameter: DiscreteTimeIntegrator_IC\r\n   * Referenced by: '<S2>/Discrete-Time Integrator'\r\n   */\r\n  0.0F,\r\n\r\n  /* Computed Parameter: DiscreteTimeIntegrator_UpperSat\r\n   * Referenced by: '<S2>/Discrete-Time Integrator'\r\n   */\r\n  2.0F,\r\n\r\n  /* Computed Parameter: DiscreteTimeIntegrator_LowerSat\r\n   * Referenced by: '<S2>/Discrete-Time Integrator'\r\n   */\r\n  -2.0F,\r\n\r\n  /* Computed Parameter: I_pr_Gain\r\n   * Referenced by: '<S2>/I_pr'\r\n   */\r\n  0.01F,\r\n\r\n  /* Computed Parameter: P_pr_Gain\r\n   * Referenced by: '<S2>/P_pr'\r\n   */\r\n  { 0.013F, 0.01F },\r\n\r\n  /* Computed Parameter: w0_Value\r\n   * Referenced by: '<S6>/w0'\r\n   */\r\n  -0.61803F,\r\n\r\n  /* Computed Parameter: SaturationThrust_UpperSat\r\n   * Referenced by: '<S6>/SaturationThrust'\r\n   */\r\n  1.20204329F,\r\n\r\n  /* Computed Parameter: SaturationThrust_LowerSat\r\n   * Referenced by: '<S6>/SaturationThrust'\r\n   */\r\n  -1.20204329F,\r\n\r\n  /* Computed Parameter: P_yaw_Gain\r\n   * Referenced by: '<S5>/P_yaw'\r\n   */\r\n  0.004F,\r\n\r\n  /* Computed Parameter: D_yaw_Gain\r\n   * Referenced by: '<S5>/D_yaw'\r\n   */\r\n  0.0012F,\r\n\r\n  /* Computed Parameter: ThrustToMotorCommand_Gain\r\n   * Referenced by: '<S7>/ThrustToMotorCommand'\r\n   */\r\n  -1530.72681F,\r\n\r\n  /* Expression: Vehicle.Motor.maxLimit\r\n   * Referenced by: '<S7>/Saturation5'\r\n   */\r\n  500.0F,\r\n\r\n  /* Expression: Vehicle.Motor.minLimit\r\n   * Referenced by: '<S7>/Saturation5'\r\n   */\r\n  10.0F,\r\n\r\n  /* Computed Parameter: MotorDirections_Gain\r\n   * Referenced by: '<S7>/MotorDirections'\r\n   */\r\n  { 1.0F, -1.0F, 1.0F, -1.0F },\r\n\r\n  /* Computed Parameter: Delay_InitialCondition\r\n   * Referenced by: '<S2>/Delay'\r\n   */\r\n  0.0F,\r\n\r\n  /* Computed Parameter: antiWU_Gain_Gain\r\n   * Referenced by: '<S2>/antiWU_Gain'\r\n   */\r\n  0.001F\r\n};\r\n\r\nMdlrefDW_flightController_T flightController_MdlrefDW;\r\n\r\n/* Block states (default storage) */\r\nDW_flightController_f_T flightController_DW;\r\n\r\n/* System initialize for referenced model: 'flightController' */\r\nvoid flightController_Init(void)\r\n{\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */\r\n  flightController_DW.DiscreteTimeIntegrator_DSTATE[0] =\r\n    flightController_P_g.DiscreteTimeIntegrator_IC;\r\n\r\n  /* InitializeConditions for Delay: '<S2>/Delay' */\r\n  flightController_DW.Delay_DSTATE[0] =\r\n    flightController_P_g.Delay_InitialCondition;\r\n\r\n  /* InitializeConditions for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */\r\n  flightController_DW.DiscreteTimeIntegrator_DSTATE[1] =\r\n    flightController_P_g.DiscreteTimeIntegrator_IC;\r\n\r\n  /* InitializeConditions for Delay: '<S2>/Delay' */\r\n  flightController_DW.Delay_DSTATE[1] =\r\n    flightController_P_g.Delay_InitialCondition;\r\n}\r\n\r\n/* Output and update for referenced model: 'flightController' */\r\nvoid flightController_run(const CommandBus *arg_ReferenceValueServerBus, const\r\n  statesEstim_t *arg_states_estim, real32_T arg_motors_refout[4], real32_T\r\n  arg_pose_refout[8])\r\n{\r\n  int32_T i;\r\n  real32_T rtb_DiscreteTimeIntegrator_idx_1;\r\n  real32_T rtb_SaturationThrust;\r\n  real32_T rtb_SaturationThrust_idx_2;\r\n  real32_T rtb_SaturationThrust_idx_3;\r\n  real32_T rtb_Sum2;\r\n  real32_T rtb_TrigonometricFunction_o2;\r\n  real32_T rtb_pitchrollerror_idx_0;\r\n  real32_T rtb_pitchrollerror_idx_1;\r\n  real32_T u0;\r\n\r\n  /* Switch: '<S1>/Switch_refAtt' incorporates:\r\n   *  Gain: '<S4>/D_xy'\r\n   *  Gain: '<S4>/P_xy'\r\n   *  Sum: '<S4>/Sum18'\r\n   */\r\n  if (arg_ReferenceValueServerBus->controlModePosVSOrient) {\r\n    /* Trigonometry: '<S4>/Trigonometric Function' */\r\n    rtb_pitchrollerror_idx_1 = (real32_T)sin(arg_states_estim->yaw);\r\n    rtb_TrigonometricFunction_o2 = (real32_T)cos(arg_states_estim->yaw);\r\n\r\n    /* Sum: '<S4>/Sum17' */\r\n    rtb_DiscreteTimeIntegrator_idx_1 = arg_ReferenceValueServerBus->pos_ref[0] -\r\n      arg_states_estim->X;\r\n    rtb_SaturationThrust = arg_ReferenceValueServerBus->pos_ref[1] -\r\n      arg_states_estim->Y;\r\n\r\n    /* Product: '<S4>/Product' incorporates:\r\n     *  SignalConversion generated from: '<S4>/Vector Concatenate1'\r\n     *  SignalConversion generated from: '<S4>/Vector Concatenate'\r\n     */\r\n    rtb_Sum2 = rtb_TrigonometricFunction_o2 * rtb_DiscreteTimeIntegrator_idx_1 +\r\n      rtb_pitchrollerror_idx_1 * rtb_SaturationThrust;\r\n\r\n    /* Saturate: '<S4>/Saturation' */\r\n    if (rtb_Sum2 > flightController_P_g.Saturation_UpperSat) {\r\n      rtb_Sum2 = flightController_P_g.Saturation_UpperSat;\r\n    } else if (rtb_Sum2 < flightController_P_g.Saturation_LowerSat) {\r\n      rtb_Sum2 = flightController_P_g.Saturation_LowerSat;\r\n    }\r\n\r\n    rtb_pitchrollerror_idx_0 = flightController_P_g.P_xy_Gain[0] * rtb_Sum2 +\r\n      flightController_P_g.D_xy_Gain[0] * arg_states_estim->dx;\r\n\r\n    /* Product: '<S4>/Product' incorporates:\r\n     *  Gain: '<S4>/D_xy'\r\n     *  Gain: '<S4>/Gain'\r\n     *  Gain: '<S4>/P_xy'\r\n     *  SignalConversion generated from: '<S4>/Vector Concatenate1'\r\n     *  Sum: '<S4>/Sum18'\r\n     */\r\n    rtb_Sum2 = flightController_P_g.Gain_Gain * rtb_pitchrollerror_idx_1 *\r\n      rtb_DiscreteTimeIntegrator_idx_1 + rtb_TrigonometricFunction_o2 *\r\n      rtb_SaturationThrust;\r\n\r\n    /* Saturate: '<S4>/Saturation' */\r\n    if (rtb_Sum2 > flightController_P_g.Saturation_UpperSat) {\r\n      rtb_Sum2 = flightController_P_g.Saturation_UpperSat;\r\n    } else if (rtb_Sum2 < flightController_P_g.Saturation_LowerSat) {\r\n      rtb_Sum2 = flightController_P_g.Saturation_LowerSat;\r\n    }\r\n\r\n    rtb_pitchrollerror_idx_1 = flightController_P_g.P_xy_Gain[1] * rtb_Sum2 +\r\n      flightController_P_g.D_xy_Gain[1] * arg_states_estim->dy;\r\n  } else {\r\n    rtb_pitchrollerror_idx_0 = arg_ReferenceValueServerBus->orient_ref[1];\r\n    rtb_pitchrollerror_idx_1 = arg_ReferenceValueServerBus->orient_ref[2];\r\n  }\r\n\r\n  /* End of Switch: '<S1>/Switch_refAtt' */\r\n\r\n  /* SignalConversion generated from: '<Root>/pose_refout' incorporates:\r\n   *  SignalConversion generated from: '<S1>/ReferenceValueServerBus_BusSelector'\r\n   */\r\n  arg_pose_refout[0] = arg_ReferenceValueServerBus->pos_ref[0];\r\n  arg_pose_refout[3] = arg_ReferenceValueServerBus->orient_ref[0];\r\n  arg_pose_refout[1] = arg_ReferenceValueServerBus->pos_ref[1];\r\n  arg_pose_refout[4] = arg_ReferenceValueServerBus->orient_ref[1];\r\n  arg_pose_refout[2] = arg_ReferenceValueServerBus->pos_ref[2];\r\n  arg_pose_refout[5] = arg_ReferenceValueServerBus->orient_ref[2];\r\n  arg_pose_refout[6] = rtb_pitchrollerror_idx_0;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */\r\n  rtb_TrigonometricFunction_o2 =\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[0];\r\n\r\n  /* SignalConversion generated from: '<Root>/pose_refout' */\r\n  arg_pose_refout[7] = rtb_pitchrollerror_idx_1;\r\n\r\n  /* DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */\r\n  rtb_DiscreteTimeIntegrator_idx_1 =\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[1];\r\n\r\n  /* Sum: '<S2>/Sum19' */\r\n  rtb_pitchrollerror_idx_0 -= arg_states_estim->pitch;\r\n  rtb_pitchrollerror_idx_1 -= arg_states_estim->roll;\r\n\r\n  /* Switch: '<S6>/TakeoffOrControl_Switch' incorporates:\r\n   *  Constant: '<S6>/w0'\r\n   *  Gain: '<S6>/D_z'\r\n   *  Gain: '<S6>/P_z'\r\n   *  Gain: '<S6>/takeoff_gain'\r\n   *  Sum: '<S6>/Sum15'\r\n   *  Sum: '<S6>/Sum3'\r\n   */\r\n  if (arg_ReferenceValueServerBus->takeoff_flag) {\r\n    rtb_SaturationThrust = flightController_P_g.takeoff_gain_Gain *\r\n      flightController_P_g.w0_Value;\r\n  } else {\r\n    rtb_SaturationThrust = (arg_ReferenceValueServerBus->pos_ref[2] -\r\n      arg_states_estim->Z) * flightController_P_g.P_z_Gain -\r\n      flightController_P_g.D_z_Gain * arg_states_estim->dz;\r\n  }\r\n\r\n  /* End of Switch: '<S6>/TakeoffOrControl_Switch' */\r\n\r\n  /* Sum: '<S6>/Sum4' incorporates:\r\n   *  Constant: '<S6>/w0'\r\n   */\r\n  rtb_SaturationThrust += flightController_P_g.w0_Value;\r\n\r\n  /* Saturate: '<S6>/SaturationThrust' */\r\n  if (rtb_SaturationThrust > flightController_P_g.SaturationThrust_UpperSat) {\r\n    rtb_SaturationThrust = flightController_P_g.SaturationThrust_UpperSat;\r\n  } else if (rtb_SaturationThrust <\r\n             flightController_P_g.SaturationThrust_LowerSat) {\r\n    rtb_SaturationThrust = flightController_P_g.SaturationThrust_LowerSat;\r\n  }\r\n\r\n  /* End of Saturate: '<S6>/SaturationThrust' */\r\n\r\n  /* Sum: '<S5>/Sum2' incorporates:\r\n   *  Gain: '<S5>/D_yaw'\r\n   *  Gain: '<S5>/P_yaw'\r\n   *  Sum: '<S5>/Sum1'\r\n   */\r\n  rtb_Sum2 = (arg_ReferenceValueServerBus->orient_ref[0] - arg_states_estim->yaw)\r\n    * flightController_P_g.P_yaw_Gain - flightController_P_g.D_yaw_Gain *\r\n    arg_states_estim->r;\r\n\r\n  /* SignalConversion generated from: '<S3>/Product' incorporates:\r\n   *  DiscreteIntegrator: '<S2>/Discrete-Time Integrator'\r\n   *  Gain: '<S2>/D_pr'\r\n   *  Gain: '<S2>/I_pr'\r\n   *  Gain: '<S2>/P_pr'\r\n   *  Sum: '<S2>/Sum16'\r\n   */\r\n  rtb_SaturationThrust_idx_2 = (flightController_P_g.P_pr_Gain[0] *\r\n    rtb_pitchrollerror_idx_0 + flightController_P_g.I_pr_Gain *\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[0]) -\r\n    flightController_P_g.D_pr_Gain[0] * arg_states_estim->q;\r\n  rtb_SaturationThrust_idx_3 = (flightController_P_g.P_pr_Gain[1] *\r\n    rtb_pitchrollerror_idx_1 + flightController_P_g.I_pr_Gain *\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[1]) -\r\n    flightController_P_g.D_pr_Gain[1] * arg_states_estim->p;\r\n  for (i = 0; i < 4; i++) {\r\n    /* Saturate: '<S7>/Saturation5' incorporates:\r\n     *  Constant: '<S3>/TorqueTotalThrustToThrustPerMotor'\r\n     *  Gain: '<S7>/ThrustToMotorCommand'\r\n     *  Product: '<S3>/Product'\r\n     *  SignalConversion generated from: '<S3>/Product'\r\n     */\r\n    u0 = (((flightController_P_g.TorqueTotalThrustToThrustPerMotor_Value[i + 4] *\r\n            rtb_Sum2 +\r\n            flightController_P_g.TorqueTotalThrustToThrustPerMotor_Value[i] *\r\n            rtb_SaturationThrust) +\r\n           flightController_P_g.TorqueTotalThrustToThrustPerMotor_Value[i + 8] *\r\n           rtb_SaturationThrust_idx_2) +\r\n          flightController_P_g.TorqueTotalThrustToThrustPerMotor_Value[i + 12] *\r\n          rtb_SaturationThrust_idx_3) *\r\n      flightController_P_g.ThrustToMotorCommand_Gain;\r\n    if (u0 > flightController_P_g.Saturation5_UpperSat) {\r\n      u0 = flightController_P_g.Saturation5_UpperSat;\r\n    } else if (u0 < flightController_P_g.Saturation5_LowerSat) {\r\n      u0 = flightController_P_g.Saturation5_LowerSat;\r\n    }\r\n\r\n    /* End of Saturate: '<S7>/Saturation5' */\r\n\r\n    /* Gain: '<S7>/MotorDirections' */\r\n    arg_motors_refout[i] = flightController_P_g.MotorDirections_Gain[i] * u0;\r\n  }\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' incorporates:\r\n   *  Delay: '<S2>/Delay'\r\n   *  Gain: '<S2>/antiWU_Gain'\r\n   *  Sum: '<S2>/Add'\r\n   */\r\n  flightController_DW.DiscreteTimeIntegrator_DSTATE[0] +=\r\n    (rtb_pitchrollerror_idx_0 - flightController_P_g.antiWU_Gain_Gain *\r\n     flightController_DW.Delay_DSTATE[0]) *\r\n    flightController_P_g.DiscreteTimeIntegrator_gainval;\r\n  if (flightController_DW.DiscreteTimeIntegrator_DSTATE[0] >=\r\n      flightController_P_g.DiscreteTimeIntegrator_UpperSat) {\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[0] =\r\n      flightController_P_g.DiscreteTimeIntegrator_UpperSat;\r\n  } else if (flightController_DW.DiscreteTimeIntegrator_DSTATE[0] <=\r\n             flightController_P_g.DiscreteTimeIntegrator_LowerSat) {\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[0] =\r\n      flightController_P_g.DiscreteTimeIntegrator_LowerSat;\r\n  }\r\n\r\n  /* Update for Delay: '<S2>/Delay' */\r\n  flightController_DW.Delay_DSTATE[0] = rtb_TrigonometricFunction_o2;\r\n\r\n  /* Update for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' incorporates:\r\n   *  Delay: '<S2>/Delay'\r\n   *  Gain: '<S2>/antiWU_Gain'\r\n   *  Sum: '<S2>/Add'\r\n   */\r\n  flightController_DW.DiscreteTimeIntegrator_DSTATE[1] +=\r\n    (rtb_pitchrollerror_idx_1 - flightController_P_g.antiWU_Gain_Gain *\r\n     flightController_DW.Delay_DSTATE[1]) *\r\n    flightController_P_g.DiscreteTimeIntegrator_gainval;\r\n  if (flightController_DW.DiscreteTimeIntegrator_DSTATE[1] >=\r\n      flightController_P_g.DiscreteTimeIntegrator_UpperSat) {\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[1] =\r\n      flightController_P_g.DiscreteTimeIntegrator_UpperSat;\r\n  } else if (flightController_DW.DiscreteTimeIntegrator_DSTATE[1] <=\r\n             flightController_P_g.DiscreteTimeIntegrator_LowerSat) {\r\n    flightController_DW.DiscreteTimeIntegrator_DSTATE[1] =\r\n      flightController_P_g.DiscreteTimeIntegrator_LowerSat;\r\n  }\r\n\r\n  /* Update for Delay: '<S2>/Delay' */\r\n  flightController_DW.Delay_DSTATE[1] = rtb_DiscreteTimeIntegrator_idx_1;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid flightController_g_initialize(const char_T **rt_errorStatus)\r\n{\r\n  RT_MODEL_flightController_T *const flightController_M =\r\n    &(flightController_MdlrefDW.rtm);\r\n\r\n  /* Registration code */\r\n\r\n  /* initialize error status */\r\n  rtmSetErrorStatusPointer(flightController_M, rt_errorStatus);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"flightController.h","type":"header","group":"model","path":"C:\\Users\\navin\\MATLAB\\Projects\\examples\\asbQuadcopter\\work\\slprj\\ert\\flightController","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: flightController.h\r\n *\r\n * Code generated for Simulink model 'flightController'.\r\n *\r\n * Model version                  : 5.1\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue Nov 30 09:36:10 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM 9\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_flightController_h_\r\n#define RTW_HEADER_flightController_h_\r\n#include <math.h>\r\n#ifndef flightController_COMMON_INCLUDES_\r\n#define flightController_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#endif                                 /* flightController_COMMON_INCLUDES_ */\r\n\r\n#include \"flightController_types.h\"\r\n#include \"MW_target_hardware_resources.h\"\r\n\r\n/* Block states (default storage) for model 'flightController' */\r\n#ifndef flightController_MDLREF_HIDE_CHILD_\r\n\r\ntypedef struct {\r\n  real32_T DiscreteTimeIntegrator_DSTATE[2];/* '<S2>/Discrete-Time Integrator' */\r\n  real32_T Delay_DSTATE[2];            /* '<S2>/Delay' */\r\n} DW_flightController_f_T;\r\n\r\n#endif                                 /*flightController_MDLREF_HIDE_CHILD_*/\r\n\r\n#ifndef flightController_MDLREF_HIDE_CHILD_\r\n\r\n/* Parameters (default storage) */\r\nstruct P_flightController_T_ {\r\n  real32_T D_xy_Gain[2];               /* Computed Parameter: D_xy_Gain\r\n                                        * Referenced by: '<S4>/D_xy'\r\n                                        */\r\n  real32_T Gain_Gain;                  /* Computed Parameter: Gain_Gain\r\n                                        * Referenced by: '<S4>/Gain'\r\n                                        */\r\n  real32_T Saturation_UpperSat;       /* Computed Parameter: Saturation_UpperSat\r\n                                       * Referenced by: '<S4>/Saturation'\r\n                                       */\r\n  real32_T Saturation_LowerSat;       /* Computed Parameter: Saturation_LowerSat\r\n                                       * Referenced by: '<S4>/Saturation'\r\n                                       */\r\n  real32_T P_xy_Gain[2];               /* Computed Parameter: P_xy_Gain\r\n                                        * Referenced by: '<S4>/P_xy'\r\n                                        */\r\n  real32_T takeoff_gain_Gain;          /* Expression: Controller.takeoffGain\r\n                                        * Referenced by: '<S6>/takeoff_gain'\r\n                                        */\r\n  real32_T D_z_Gain;                   /* Computed Parameter: D_z_Gain\r\n                                        * Referenced by: '<S6>/D_z'\r\n                                        */\r\n  real32_T P_z_Gain;                   /* Computed Parameter: P_z_Gain\r\n                                        * Referenced by: '<S6>/P_z'\r\n                                        */\r\n  real32_T TorqueTotalThrustToThrustPerMotor_Value[16];/* Expression: Controller.Q2Ts\r\n                                                        * Referenced by: '<S3>/TorqueTotalThrustToThrustPerMotor'\r\n                                                        */\r\n  real32_T D_pr_Gain[2];               /* Computed Parameter: D_pr_Gain\r\n                                        * Referenced by: '<S2>/D_pr'\r\n                                        */\r\n  real32_T DiscreteTimeIntegrator_gainval;\r\n                           /* Computed Parameter: DiscreteTimeIntegrator_gainval\r\n                            * Referenced by: '<S2>/Discrete-Time Integrator'\r\n                            */\r\n  real32_T DiscreteTimeIntegrator_IC;\r\n                                /* Computed Parameter: DiscreteTimeIntegrator_IC\r\n                                 * Referenced by: '<S2>/Discrete-Time Integrator'\r\n                                 */\r\n  real32_T DiscreteTimeIntegrator_UpperSat;\r\n                          /* Computed Parameter: DiscreteTimeIntegrator_UpperSat\r\n                           * Referenced by: '<S2>/Discrete-Time Integrator'\r\n                           */\r\n  real32_T DiscreteTimeIntegrator_LowerSat;\r\n                          /* Computed Parameter: DiscreteTimeIntegrator_LowerSat\r\n                           * Referenced by: '<S2>/Discrete-Time Integrator'\r\n                           */\r\n  real32_T I_pr_Gain;                  /* Computed Parameter: I_pr_Gain\r\n                                        * Referenced by: '<S2>/I_pr'\r\n                                        */\r\n  real32_T P_pr_Gain[2];               /* Computed Parameter: P_pr_Gain\r\n                                        * Referenced by: '<S2>/P_pr'\r\n                                        */\r\n  real32_T w0_Value;                   /* Computed Parameter: w0_Value\r\n                                        * Referenced by: '<S6>/w0'\r\n                                        */\r\n  real32_T SaturationThrust_UpperSat;\r\n                                /* Computed Parameter: SaturationThrust_UpperSat\r\n                                 * Referenced by: '<S6>/SaturationThrust'\r\n                                 */\r\n  real32_T SaturationThrust_LowerSat;\r\n                                /* Computed Parameter: SaturationThrust_LowerSat\r\n                                 * Referenced by: '<S6>/SaturationThrust'\r\n                                 */\r\n  real32_T P_yaw_Gain;                 /* Computed Parameter: P_yaw_Gain\r\n                                        * Referenced by: '<S5>/P_yaw'\r\n                                        */\r\n  real32_T D_yaw_Gain;                 /* Computed Parameter: D_yaw_Gain\r\n                                        * Referenced by: '<S5>/D_yaw'\r\n                                        */\r\n  real32_T ThrustToMotorCommand_Gain;\r\n                                /* Computed Parameter: ThrustToMotorCommand_Gain\r\n                                 * Referenced by: '<S7>/ThrustToMotorCommand'\r\n                                 */\r\n  real32_T Saturation5_UpperSat;       /* Expression: Vehicle.Motor.maxLimit\r\n                                        * Referenced by: '<S7>/Saturation5'\r\n                                        */\r\n  real32_T Saturation5_LowerSat;       /* Expression: Vehicle.Motor.minLimit\r\n                                        * Referenced by: '<S7>/Saturation5'\r\n                                        */\r\n  real32_T MotorDirections_Gain[4];  /* Computed Parameter: MotorDirections_Gain\r\n                                      * Referenced by: '<S7>/MotorDirections'\r\n                                      */\r\n  real32_T Delay_InitialCondition; /* Computed Parameter: Delay_InitialCondition\r\n                                    * Referenced by: '<S2>/Delay'\r\n                                    */\r\n  real32_T antiWU_Gain_Gain;           /* Computed Parameter: antiWU_Gain_Gain\r\n                                        * Referenced by: '<S2>/antiWU_Gain'\r\n                                        */\r\n};\r\n\r\n#endif                                 /*flightController_MDLREF_HIDE_CHILD_*/\r\n\r\n#ifndef flightController_MDLREF_HIDE_CHILD_\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_flightController_T {\r\n  const char_T **errorStatus;\r\n};\r\n\r\n#endif                                 /*flightController_MDLREF_HIDE_CHILD_*/\r\n\r\n#ifndef flightController_MDLREF_HIDE_CHILD_\r\n\r\ntypedef struct {\r\n  RT_MODEL_flightController_T rtm;\r\n} MdlrefDW_flightController_T;\r\n\r\n#endif                                 /*flightController_MDLREF_HIDE_CHILD_*/\r\n\r\nextern void flightController_Init(void);\r\nextern void flightController_run(const CommandBus *arg_ReferenceValueServerBus,\r\n  const statesEstim_t *arg_states_estim, real32_T arg_motors_refout[4], real32_T\r\n  arg_pose_refout[8]);\r\n\r\n/* Model reference registration function */\r\nextern void flightController_g_initialize(const char_T **rt_errorStatus);\r\n\r\n#ifndef flightController_MDLREF_HIDE_CHILD_\r\n\r\nextern MdlrefDW_flightController_T flightController_MdlrefDW;\r\n\r\n#endif                                 /*flightController_MDLREF_HIDE_CHILD_*/\r\n\r\n#ifndef flightController_MDLREF_HIDE_CHILD_\r\n\r\n/* Block states (default storage) */\r\nextern DW_flightController_f_T flightController_DW;\r\n\r\n#endif                                 /*flightController_MDLREF_HIDE_CHILD_*/\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'flightController'\r\n * '<S1>'   : 'flightController/Flight Controller'\r\n * '<S2>'   : 'flightController/Flight Controller/Attitude'\r\n * '<S3>'   : 'flightController/Flight Controller/ControlMixer'\r\n * '<S4>'   : 'flightController/Flight Controller/XY-to-reference-orientation'\r\n * '<S5>'   : 'flightController/Flight Controller/Yaw'\r\n * '<S6>'   : 'flightController/Flight Controller/gravity feedforward//equilibrium thrust'\r\n * '<S7>'   : 'flightController/Flight Controller/thrustsToMotorCommands'\r\n */\r\n#endif                                 /* RTW_HEADER_flightController_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"flightController_private.h","type":"header","group":"model","path":"C:\\Users\\navin\\MATLAB\\Projects\\examples\\asbQuadcopter\\work\\slprj\\ert\\flightController","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: flightController_private.h\r\n *\r\n * Code generated for Simulink model 'flightController'.\r\n *\r\n * Model version                  : 5.1\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue Nov 30 09:36:10 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM 9\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_flightController_private_h_\r\n#define RTW_HEADER_flightController_private_h_\r\n#include \"rtwtypes.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         (*((rtm)->errorStatus))\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    (*((rtm)->errorStatus) = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatusPointer\r\n#define rtmGetErrorStatusPointer(rtm)  (rtm)->errorStatus\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatusPointer\r\n#define rtmSetErrorStatusPointer(rtm, val) ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef flightController_MDLREF_HIDE_CHILD_\r\n\r\nextern P_flightController_T flightController_P_g;\r\n\r\n#endif                                 /*flightController_MDLREF_HIDE_CHILD_*/\r\n#endif                              /* RTW_HEADER_flightController_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"flightController_types.h","type":"header","group":"model","path":"C:\\Users\\navin\\MATLAB\\Projects\\examples\\asbQuadcopter\\work\\slprj\\ert\\flightController","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: flightController_types.h\r\n *\r\n * Code generated for Simulink model 'flightController'.\r\n *\r\n * Model version                  : 5.1\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue Nov 30 09:36:10 2021\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM 9\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_flightController_types_h_\r\n#define RTW_HEADER_flightController_types_h_\r\n#include \"rtwtypes.h\"\r\n\r\n/* Model Code Variants */\r\n#ifndef DEFINED_TYPEDEF_FOR_CommandBus_\r\n#define DEFINED_TYPEDEF_FOR_CommandBus_\r\n\r\ntypedef struct {\r\n  boolean_T controlModePosVSOrient;\r\n  real32_T pos_ref[3];\r\n  boolean_T takeoff_flag;\r\n  real32_T orient_ref[3];\r\n  uint32_T live_time_ticks;\r\n} CommandBus;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_statesEstim_t_\r\n#define DEFINED_TYPEDEF_FOR_statesEstim_t_\r\n\r\ntypedef struct {\r\n  real32_T X;\r\n  real32_T Y;\r\n  real32_T Z;\r\n  real32_T yaw;\r\n  real32_T pitch;\r\n  real32_T roll;\r\n  real32_T dx;\r\n  real32_T dy;\r\n  real32_T dz;\r\n  real32_T p;\r\n  real32_T q;\r\n  real32_T r;\r\n} statesEstim_t;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_eAf0NJvzCY9HYTXF7bLNgB_\r\n#define DEFINED_TYPEDEF_FOR_struct_eAf0NJvzCY9HYTXF7bLNgB_\r\n\r\ntypedef struct {\r\n  real_T Ts2Q[16];\r\n  real_T Q2Ts[16];\r\n  real_T takeoffGain;\r\n  real_T totalThrustMaxRelative;\r\n  real_T motorsThrustPerMotorMax;\r\n} struct_eAf0NJvzCY9HYTXF7bLNgB;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_XRMsui9C07VjBvdq1msujB_\r\n#define DEFINED_TYPEDEF_FOR_struct_XRMsui9C07VjBvdq1msujB_\r\n\r\ntypedef struct {\r\n  real_T initGreenwich;\r\n  real_T quatGain;\r\n} struct_XRMsui9C07VjBvdq1msujB;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_hxsmtt0xTZOLDNa2Rz7GAF_\r\n#define DEFINED_TYPEDEF_FOR_struct_hxsmtt0xTZOLDNa2Rz7GAF_\r\n\r\ntypedef struct {\r\n  real_T xAxis;\r\n} struct_hxsmtt0xTZOLDNa2Rz7GAF;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_IZWOW0zYvpphl7qLgSfN7E_\r\n#define DEFINED_TYPEDEF_FOR_struct_IZWOW0zYvpphl7qLgSfN7E_\r\n\r\ntypedef struct {\r\n  real_T href;\r\n  struct_hxsmtt0xTZOLDNa2Rz7GAF FlatEarthToLLA;\r\n} struct_IZWOW0zYvpphl7qLgSfN7E;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_q6UUpnZ4gTjFvULFx6Rxa_\r\n#define DEFINED_TYPEDEF_FOR_struct_q6UUpnZ4gTjFvULFx6Rxa_\r\n\r\ntypedef struct {\r\n  real_T mass;\r\n  real_T inertia[9];\r\n  real_T d;\r\n  real_T xy;\r\n  real_T h;\r\n  real_T Cdx;\r\n  real_T Cdy;\r\n  real_T diameter;\r\n} struct_q6UUpnZ4gTjFvULFx6Rxa;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_OMRgDnJcZuQneKEj9vdTyD_\r\n#define DEFINED_TYPEDEF_FOR_struct_OMRgDnJcZuQneKEj9vdTyD_\r\n\r\ntypedef struct {\r\n  real_T blades;\r\n  real_T radius;\r\n  real_T chord;\r\n  real_T flappingOffset;\r\n  real_T bladeMass;\r\n  real_T bladeInertia;\r\n  real_T hubMass;\r\n  real_T hubInertia;\r\n  real_T inertia;\r\n  real_T Ct;\r\n  real_T Cq;\r\n  real_T solidity;\r\n  real_T theta0;\r\n  real_T thetaTip;\r\n  real_T theta1;\r\n  real_T theta34;\r\n  real_T a;\r\n  real_T area;\r\n  real_T lock;\r\n  real_T b;\r\n  real_T k;\r\n  real_T w2ToThrustGain;\r\n} struct_OMRgDnJcZuQneKEj9vdTyD;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_p3FXZIgqtjF2uqDpmYjb6C_\r\n#define DEFINED_TYPEDEF_FOR_struct_p3FXZIgqtjF2uqDpmYjb6C_\r\n\r\ntypedef struct {\r\n  real_T maxLimit;\r\n  real_T minLimit;\r\n  real_T commandToW2Gain;\r\n  real_T thrustToMotorCommand;\r\n} struct_p3FXZIgqtjF2uqDpmYjb6C;\r\n\r\n#endif\r\n\r\n#ifndef DEFINED_TYPEDEF_FOR_struct_OSJpyIZcrpXqReVWwh9iuG_\r\n#define DEFINED_TYPEDEF_FOR_struct_OSJpyIZcrpXqReVWwh9iuG_\r\n\r\ntypedef struct {\r\n  struct_XRMsui9C07VjBvdq1msujB SixDOF;\r\n  struct_IZWOW0zYvpphl7qLgSfN7E PositionOnEarth;\r\n  struct_q6UUpnZ4gTjFvULFx6Rxa Airframe;\r\n  struct_OMRgDnJcZuQneKEj9vdTyD Rotor;\r\n  struct_p3FXZIgqtjF2uqDpmYjb6C Motor;\r\n} struct_OSJpyIZcrpXqReVWwh9iuG;\r\n\r\n#endif\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct P_flightController_T_ P_flightController_T;\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_flightController_T RT_MODEL_flightController_T;\r\n\r\n#endif                                /* RTW_HEADER_flightController_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"sharedutility","path":"C:\\Users\\navin\\MATLAB\\Projects\\examples\\asbQuadcopter\\work\\slprj\\ert\\_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'conversionYUV'.\r\n *\r\n * Model version                  : 5.1\r\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\r\n * C/C++ source code generated on : Tue Nov 30 09:35:41 2021\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM 9\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"MW_target_hardware_resources.h","type":"header","group":"other","path":"C:\\Users\\navin\\MATLAB\\Projects\\examples\\asbQuadcopter\\work\\slprj\\ert\\flightController","tag":"","groupDisplay":"Other files","code":"#ifndef PORTABLE_WORDSIZES\n#ifdef __MW_TARGET_USE_HARDWARE_RESOURCES_H__\n#ifndef __MW_TARGET_HARDWARE_RESOURCES_H__\n#define __MW_TARGET_HARDWARE_RESOURCES_H__\n\n#define MW_MULTI_TASKING_MODE 0\n\n#define MW_USECODERTARGET 1\n#define MW_TARGETHARDWARE PARROT Mambo\n#define MW_CONNECTIONINFO_TCPIP_IPADDRESS 192.168.3.1\n#define MW_CONNECTIONINFO_TCPIP_PORT 17725\n#define MW_CONNECTIONINFO_TCPIP_VERBOSE 1\n#define MW_CONNECTIONINFO_XCPONTCPIP_IPADDRESS 192.168.3.1\n#define MW_CONNECTIONINFO_XCPONTCPIP_PORT 17725\n#define MW_CONNECTIONINFO_XCPONTCPIP_VERBOSE 1\n#define MW_EXTMODE_CONFIGURATION TCP/IP\n#define MW_RTOS Baremetal\n#define MW_RUNTIME_BUILDACTION 1\n#define MW_RUNTIME_DISABLEPARALLELBUILD 0\n#define MW_UI_LAUNCH 1\n#define MW_CONFIG_ENABLEPROFILING 0\n#define MW_CONFIG_ENABLEOPTICALFLOW 1\n#define MW_CONFIG_ENABLEIMAGEVISION 0\n#define MW_CONFIG_USEIMAGEVISIONFORPOSITION 0\n#define MW_CONFIG_USELOOKUP 0\n#define MW_CONFIG_NOSAFETY 1\n#define MW_CONFIG_ABORT 0\n#define MW_CONFIG_MAXACCELERATION 60\n#define MW_CONFIG_IMAGELOGGING 0\n#define MW_CLOCKING_CPUCLOCKRATEMHZ 416\n#define MW_DATAVERSION 2016.02\n\n#endif /* __MW_TARGET_HARDWARE_RESOURCES_H__ */\n\n#endif\n\n#endif\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};